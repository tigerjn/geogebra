plugins {
    id 'java-library'
}

description 'Java Native Interface to connect Giac and GeoGebra'

sourceCompatibility = 11
targetCompatibility = 11

import org.gradle.internal.os.OperatingSystem;

task unzipNatives() {
    description 'Unzips Giac native DLLs. Only Linux is fully supported right now.'
    def nativesDir = file("build/libs/natives")
    outputs.dir nativesDir
    doLast {
    // Copying native Giac DLLs into the same directory where the non-native JAR takes place.
	def giac_natives = project(":desktop").configurations.runtime.findAll { it.name.contains("giac") && it.name.contains("natives") }
	for (i in giac_natives) {
		def giac_native_path = i.getPath()
		def myBit = System.getProperty("sun.arch.data.model")
		def thisBit = 64
		if (i.name.contains('i586')) {
			thisBit = 32
		}
		println "file $i ($thisBit) can run on a $myBit machine?"
		if (myBit == thisBit.toString()) {
			ant.unzip(src:"$giac_native_path", dest: nativesDir)
			if (OperatingSystem.current().isLinux()) { // FIXME: do something similar for Windows if needed
				def sofile = file("$nativesDir/libjavagiac64.so")
				if (sofile.exists()) {
					ant.move(file: sofile, tofile:"$nativesDir/libjavagiac.so")
					}
				}
			}
		}
	}
    }

task testJni (dependsOn: ['unzipNatives', build], type: Exec) {
    description 'Tests the JNI executable.'
    workingDir 'build/libs'
    commandLine 'java', '-cp', 'giac-jni.jar', '-Djava.library.path=natives', 'javagiac.minigiac'
    }
