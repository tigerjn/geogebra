import io.miret.etienne.gradle.sass.CompileSass
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.13'
    id 'de.aaschmid.cpd' version '3.3'
    id 'io.miret.etienne.sass' version '1.4.2'
    id 'org.wisepersist.gwt' version '1.1.19'
}

description 'Parts of GeoGebra related to web platforms'

evaluationDependsOn(':web-common')
evaluationDependsOn(':editor-web')
evaluationDependsOn(':web-dev')
evaluationDependsOn(':keyboard-web')

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

if(hasProperty("eclipse")){
    eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
}

compileJava.options.sourcepath = files(processResources.destinationDir).builtBy(processResources)

apply from: "../gradle-scripts/webjars.gradle"
compileJava.dependsOn('extractJs')

task extractJs() {
    doLast {
        extractWebjars()
    }
}

dependencies {
    implementation project(path: ':carota-web'),
        project(':web-dev'),
        project(':web-common'),
        project(':editor-web'),
        project(':keyboard-web'),
        'org.webjars.npm:pdfjs-dist:2.5.207',
        "org.geogebra:multiplayer:1.0.202301170910",
        "org.geogebra:multiplayer:1.0.202301170910:sources",
        files(project(':carota-web').sourceSets.main.allSource.srcDirs),
        files(project(':renderer-web').sourceSets.main.allSource.srcDirs),
        files(project(':gwtutil').sourceSets.main.allSource.srcDirs),
        files(project(':web-dev').sourceSets.main.allSource.srcDirs),
        files(project(':web-common').sourceSets.main.allSource.srcDirs),
        files(project(':editor-web').sourceSets.main.allSource.srcDirs),
        files(project(':keyboard-web').sourceSets.main.allSource.srcDirs),
        files(file("build/generated/sources/annotationProcessor/java/main/")),
        files(file("build/generated/sources/webjars/java/main/"))

    testImplementation "junit:junit:$junitVersion",
        'com.google.gwt.gwtmockito:gwtmockito:1.1.10-SNAPSHOT',
        "org.gwtproject:gwt-user:$gwtCompilerVersion"

    annotationProcessor project(":gwtutil"),
            'org.gwtproject.resources:gwt-resources-processor:HEAD-SNAPSHOT'
}

def devModule = project.findProperty("gmodule") ?: 'org.geogebra.web.SuperWeb'

ext.appSpecs = [
    [id:'classic', title:'Classic', transKey:'Classic', exe:'GeoGebra', pkg:'GeoGebra_6.0',
        releases: 'Releases', icon: 'ggb.ico', measurementId: 'G-8JGZQG6FHG',
        firebaseAppId: '1:895270214636:web:3c05deeefcd1a96584fec9'],
    [id:'graphing', title:'Graphing Calculator', transKey:'GraphingCalculator',
        exe:'GeoGebraGraphing', pkg:'GeoGebra_Graphing', releases: 'Releases-graphing',
        icon: 'Graphing.ico', appStoreId:'1146717204', measurementId: 'G-55K7P9GRQK',
        firebaseAppId: '1:895270214636:web:db7055c9a67f1f1e84fec9'],
    [id:'3d', title:'3D Graphing Calculator', transKey:'Graphing3D', appStoreId:'1445871976',
        firebaseAppId: '1:895270214636:web:574d60209dda5f5384fec9',
        measurementId: 'G-PMP3RB4M8S'],
    [id:'cas', title:'CAS Calculator', transKey:'CASCalculator',
        exe:'GeoGebraCAS', pkg:'GeoGebra_CAS',  releases: 'Releases-cas',
        icon: 'CAS.ico', appStoreId:'1436278267', measurementId: 'G-N3Z7S82FZ6',
        firebaseAppId: '1:895270214636:web:87b00b628121939d84fec9'],
    [id:'scientific', title:'Scientific Calculator', transKey:'ScientificCalculator',
        partials:["undo-redo"], appStoreId:'1412748754', measurementId: 'G-YJ1QVF1SFK',
        firebaseAppId: '1:895270214636:web:540b533d4b47a7bb84fec9'],
    [id:'geometry', title:'Geometry', transKey:'Geometry',
        exe:'GeoGebraGeometry', pkg:'GeoGebra_Geometry', releases: 'Releases-geometry',
        icon: 'Geometry.ico', appStoreId:'1232591335', measurementId: 'G-82GL4RTR4H',
        firebaseAppId: '1:895270214636:web:6bf3d469e0d2b32584fec9'],
    [id:'suite', title:'Calculator Suite', transKey:'CalculatorSuite',
         firebaseAppId: '1:895270214636:web:7daf432883a8464084fec9', icon: 'ggb.ico',
         measurementId: 'G-FXVLXMD21Y', appStoreId: '1504416652',
         pkg:'GeoGebra_Calculator', exe: 'GeoGebraCalculator', releases: 'Releases-suite'],
    [id:'notes', title:'Notes', transKey: 'Notes', exe:'GeoGebraNotes', pkg:'GeoGebra_Notes',
         releases: 'Releases-notes', icon: 'notes.ico', measurementId: 'G-MWHBRQSXTL',
         firebaseAppId: '1:895270214636:web:aece5066924cacb084fec9'],
    [id:'notes-mebis', title:'Tafel', transKey: 'Tafel', exe:'MebisTafel', pkg:'Mebis_Tafel',
         icon: 'notes.ico', vendor: "Mebis"]]

compileSass {
    // Directory where to output generated CSS:
    outputDir = file("${projectDir}/war/css")

    // Source directory containing sass to compile:
    sourceDir = file("${projectDir}/src/main/resources/scss")

    // Set the output style:
    // Possible values are “expanded” and “compressed”, default is “expanded”.
    style = compressed

    // Source map style:
    //  - file: output source map in a separate file (default)
    //  - embed: embed source map in CSS
    //  - none: do not emit source map.
    sourceMap = none
}

task watchSass (type: CompileSass) {
    outputDir = file("${projectDir}/war/css")
    sourceDir = file("${projectDir}/src/main/resources/scss")
    style = compressed
    sourceMap = embed

    // Watch sass files in sourceDir for changes
    // (Default is to not to watch, compile once and terminate)
    watch ()
}

def warDirRel = 'war'

gwt {
    gwtVersion = gwtCompilerVersion

    if (project.hasProperty("gmodule")) {
        modules = project.getProperty("gmodule").split(",")
    } else {
        modules = ['org.geogebra.web.Web3D', 'org.geogebra.web.WebSimple', 'org.geogebra.web.Web',
          'org.geogebra.web.Tablet3D']
    }
    
    devModules devModule
    
    maxHeapSize = '2000M'

    jsInteropExports {
        shouldGenerate = true;
    }

    compiler {
        // Customize the GWT compiler here
        strict = true
        disableCastChecking = true
      
        if (project.hasProperty("greport")) {
           compileReport = true
        }
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gworkers")) {
            localWorkers = project.getProperty("gworkers")
        }
        if (project.hasProperty("gdetailed")){
            style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
        } else {
            disableClassMetadata = true
        }
        if (project.hasProperty("gsoyc")) {
            soycDetailed = true
        }
        // style = de.richsource.gradle.plugins.gwt.Style.PRETTY;    
    }

    dev {
        bindAddress = project.findProperty("gbind") ?: 'localhost'
        superDevMode = true
    }
}

tasks.withType(org.wisepersist.gradle.plugins.gwt.AbstractGwtActionTask) {
    jvmArgs '-Xss512M'
}


def outputs = ['web', 'web3d', 'webSimple', 'solver', 'tablet3d','tabletWin']

task cleanWar(type: Delete) {
    doLast {
      outputs.each { folder ->
          delete warDirRel + "/$folder"
      }
    }
}

apply from: "templates.gradle"

def createHtml = { inlineCss ->
    delete {
        delete fileTree(dir:'war', include: "*.html")
    }

    copy {
        from file("../common/src/main/resources/giac")
        into warDirRel
    }
    copy {
        from file("src/main/resources/org/geogebra/web/resources/war")
        into warDirRel
    }

    appSpecs.each { app ->
        def replaceHtml = app.id == "classic" ? classicHtml : appHtml
        file("war/${app.id}-offline.html").text = english(replaceHtml(app, false, true, inlineCss), app.title)
        file("war/${app.id}.html").text = english(replaceHtml(app, true, false, inlineCss), app.title)
        if (app.vendor == "Mebis") {
            file("war/${app.id}-template.html").text = replaceHtml(app, false).replace("<!--CODEBASE-->", "/")
        }
    }
    file("war/calculator.html").text = file("war/suite.html").text
    file("war/notes-murokdev.html").text = file("war/notes.html").text.replace('<!--LANGUAGE LINKS-->', '<script src="http://localhost:8080/murok.js"></script>');
}

task copyHtml(dependsOn: 'compileSass') {
    description 'Generate app.html, app-release.html, graphing.html and others'
    group 'application'

    doLast {
        createHtml(true)
    }
}

task copyDevHtml(dependsOn: 'compileSass') {
    description 'Generate app.html, app-release.html, graphing.html and others without inlined css'
    group 'application'

    doLast {
        createHtml(false)
    }
}

task copyHandlebars(dependsOn: 'compileSass') {
    doLast {
        def handlebarsDir = project.getProperty("handlebarsDir")
        appSpecs.each { app ->
            def replaceHtml = app.id == "classic" ? classicHtml : appHtml

            def templatePath =  "${handlebarsDir}/${app.id}-template.handlebars"
            file(templatePath).text = handlebars(replaceHtml(app, false, false, true))
        }
        String solver = solverHtml()
        def solverPath = "${handlebarsDir}/solver-template.handlebars"
        file(solverPath).text = handlebars(solver)
    }
}

task createSolverHtml {
    doLast {
        String solver = solverHtml()
        // for localhost and autotest
        file("war/solver.html").text = solver
            .replace("<!--APP NAME-->", "Math Solver")
            .replace("<!--SIGN IN-->", "Sign In")
            .replace("<!--LANGUAGE LINKS-->", "<script>codebase=\"./\"</script>")
    }
}

task prepareS3Upload(dependsOn: ['compileGwt', 'copyHtml']) {
    doLast {
        ["web3d", "webSimple"].each { module ->
            def dir = file("build/gwt/out/$module")
            fileTree(dir).each { f ->
                println "$f -> $f"
                def outFile = file("$f".replace(dir.absolutePath, "build/s3/$module/"))
                file(outFile.parent).mkdirs()
                ant.gzip(src: f, zipfile: outFile)
            }
        }
    }
}

task deployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml', 'createSolverHtml']) {
    description 'Copies/updates the GWT production compilation directory (web3d, ...) to the war directory.'
    from compileGwt
    into warDirRel
}

task mergeDeploy(){
   description 'merge deploy.js and web3d.nocache.js'
   mustRunAfter 'compileGwt'
   doLast {
      def firstFolder = {files -> files.listFiles() ? files.listFiles()[0].name : ""};
      def web3dPermutation = firstFolder(file("./build/gwt/out/web3d/deferredjs"))
      def webSimplePermutation = firstFolder(file("./build/gwt/out/webSimple/deferredjs"))
      def templateJs = "src/main/resources/org/geogebra/web/resources/js/deployggb-template.js"
      def deployText = file(templateJs).text.replace('%WEB3D_PERMUTATION%', web3dPermutation)
                          .replace('%WEBSIMPLE_PERMUTATION%', webSimplePermutation)
      def parentRoot = project(":common").getBuildDir().getAbsolutePath() + "/../../"
      def currentVersion = getGeogebraVersion(parentRoot)
      def localPath = project.findProperty("deployggbRoot") ?: './'
      file(warDirRel + "/deployggb.js").text = deployText.replace('%MODULE_BASE%', localPath)
      file(warDirRel + "/deployggb-latest.js").text = deployText.replace('%MODULE_BASE%','https://www.geogebra.org/apps/latest/')
      file(warDirRel + "/deployggb-${currentVersion}.js").text = deployText.replace('%MODULE_BASE%',"https://www.geogebra.org/apps/${currentVersion}/")
   }
}

def gwtGlobalCache = file('build/gwt/devModeCache')

class ReadableDev extends org.wisepersist.gradle.plugins.gwt.GwtDev {
    protected void addArgs() {
        super.addArgs();
        args("-style", "PRETTY");
    }
}

task run(type: ReadableDev, dependsOn: ['jar', 'copyDevHtml', 'createSolverHtml']) {
    war = file(warDirRel)
    maxHeapSize = '4096m'
    logLevel = 'TRACE'
    cacheDir = gwtGlobalCache
    extraJvmArgs = ["-Djava.io.tmpdir=${gwtGlobalCache.absolutePath}"]
    description 'Starts a codeserver, and a simple webserver for development'
    Process sassCompilation
    doFirst {
        delete {
            delete gwtGlobalCache
        }
        gwtGlobalCache.mkdirs()
        ProcessBuilder pb = new ProcessBuilder(Os.isFamily(Os.FAMILY_WINDOWS)
                        ? ['cmd', '/c', 'START', '/MIN', file('..\\gradlew.bat').absolutePath, 'watchSass']
                        : [file('../gradlew').absolutePath, 'watchSass'])
        sassCompilation = pb.start()
    }
    doLast {
        sassCompilation.destroy()
    }
}

task createDraftBundleZip (type: Zip, dependsOn: 'compileSass') {
    description 'Creates the Math Apps Bundle file.'
    destinationDirectory = file(warDirRel)
    archiveBaseName = "geogebra-bundle"
    from compileGwt {
        include ("web3d/**")
        into "GeoGebra/HTML5/5.0"
    }
    from("war/css") {
        include "**"
        into "css"
    }
}

task minifyLibs() {
    doLast {
        def libDir = "src/main/resources/org/geogebra/web/"
        def libDirCommon = "../web-common/$libDir"
        def libs = ["$libDirCommon/resources/js/rewrite_pHYs", "$libDir/pub/js/canvas2pdf", "$libDir/pub/js/whammy"]
        libs.each({lib ->
            def command = ['npx', 'terser', "${lib}.js", "-o", "${lib}.min.js",
            '--compress', '--mangle', '--comments', '/license/']
            exec { commandLine Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] + command : command}
        })
    }
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

test {
    ignoreFailures = true
    maxHeapSize = "1024m"
}

spotbugs {
    ignoreFailures = true
    excludeFilter = file("../config/spotbugs.xml")
    jvmArgs = ['-Dfindbugs.sf.comment=true']
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("../config/pmd.xml")
}

cpd {
    ignoreFailures = true
    minimumTokenCount = 100
}

tasks.withType(de.aaschmid.gradle.plugins.cpd.Cpd) {
    exclude "**/*.html"
    exclude "**/*.jj"
    exclude "**/*.xml"
    exclude "**/*.svg"
}
