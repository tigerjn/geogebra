plugins {
    id 'java-library'
    id 'org.wisepersist.gwt' version '1.1.19'
    id 'pmd'
    id 'checkstyle'
}

sourceCompatibility = 11
targetCompatibility = 11

evaluationDependsOn(':keyboard-base')
evaluationDependsOn(':keyboard-scientific')
evaluationDependsOn(':common')
evaluationDependsOn(':web-dev')

dependencies{
	api project(':keyboard-base'),
	files(project(':keyboard-base').sourceSets.main.allSource.srcDirs),
	project(':keyboard-scientific'),
	files(project(':keyboard-scientific').sourceSets.main.allSource.srcDirs),
	project(':common'), //needed for Unicode and Language
	files(project(':common').sourceSets.main.allSource.srcDirs),
	project(':web-dev'), //needed for Unicode and Language
	files(project(':web-dev').sourceSets.main.allSource.srcDirs),
    files(file("build/generated/sources/annotationProcessor/java/main/"))

    annotationProcessor project(":gwtutil"),
            'org.gwtproject.resources:gwt-resources-processor:HEAD-SNAPSHOT'
}

compileJava.options.sourcepath = files(processResources.destinationDir).builtBy(processResources)

def kbModule = 'org.geogebra.keyboard.KeyboardWeb'
gwt {
    gwtVersion = project(':renderer-web').gwtCompilerVersion

    modules = [kbModule]
    
    devModules kbModule
    
    maxHeapSize = '2000M'

    compiler {
        // Customize the GWT compiler here
        strict = true;
        // enableClosureCompiler = true;        
        disableCastChecking = true;        
        logLevel = 'INFO';
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gdetailed")){
            style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED;
        } else {
            disableClassMetadata = true;
        }
        // style = org.wisepersist.gradle.plugins.gwt.Style.PRETTY;    
    }
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("../config/pmd.xml")
}
